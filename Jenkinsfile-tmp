pipeline {
    agent {label 'node1'}
    environment {
        DOCKER_TAG = getDockerTag()
        NEXUS_URL  = "172.31.34.232:8080"
        IMAGE_URL_WITH_TAG = "${NEXUS_URL}/node-app:${DOCKER_TAG}"


        DOCKER_TAG = getDockerTag()
        IMAGE = "ma31121990/node-app"
        REGISTRY = "https://registry.hub.docker.com"  
        CONTAINER = "node-app"  
    }

    stages{
        stage('Build Docker Image'){
            steps{
                sh "docker build . -t ${IMAGE}:${DOCKER_TAG}"
//                sh 'docker build -f "Dockerfile-terraform" -t brightbox/terraform:latest .'
//                sh 'docker build -f "Dockerfile-cli" -t brightbox/cli:latest'
            }
        }

      steps {
        withDockerRegistry([ credentialsId: "docker_hub_login", url: "" ]) {
          sh "docker push ${IMAGE}:${DOCKER_TAG}"


${env.BUILD_NUMBER}

        stage('Push_Image') {
            steps {
                withCredentials([string(credentialsId: 'docker_hub_login', variable: 'nexusPwd')]) {                


                script {
                    docker.withRegistry("${REGISTRY}", 'docker_hub_login') {
                        app.push("${env.BUILD_NUMBER}")
                        app.push("latest")
                    }
                }
            }
        }





        stage('Nexus Push'){
            steps{
                withCredentials([string(credentialsId: 'nexus-pwd', variable: 'nexusPwd')]) {
                    sh "docker login -u admin -p ${nexusPwd} ${NEXUS_URL}"
                    sh "docker push ${IMAGE_URL_WITH_TAG}"
                }
            }
        }



        stage('Docker Deploy Dev'){
            steps{
                sshagent(['tomcat-dev']) {
                    withCredentials([string(credentialsId: 'nexus-pwd', variable: 'nexusPwd')]) {
                        sh "ssh ec2-user@172.31.0.38 docker login -u admin -p ${nexusPwd} ${NEXUS_URL}"
                    }
					// Remove existing container, if container name does not exists still proceed with the build
					sh script: "ssh ec2-user@172.31.0.38 docker rm -f nodeapp",  returnStatus: true
                    
                    sh "ssh ec2-user@172.31.0.38 docker run -d -p 8080:8080 --name nodeapp ${IMAGE_URL_WITH_TAG}"
                }
            }
        }
    }
}



def getDockerTag(){
    def tag  = sh script: 'git rev-parse HEAD', returnStdout: true
    return tag
}
